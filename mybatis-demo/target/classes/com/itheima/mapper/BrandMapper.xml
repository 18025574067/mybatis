<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    namespace: 名称空间
-->
<mapper namespace="com.itheima.mapper.BrandMapper">

    <!--statement语句-->
    <!--
    数据库表的 字段名称 和 实体类的属性 名称不一致, 则不能封装数据.
        * 起别名:  对不一样的列名起别名, 让别名和实体类的属性名对应上.
            * 缺点: 每次查询都要起别名, 不方便.
                * sql片段.
                    * 不灵活.
        * resultMap:
            * 1. 定义<resultMap>标签
            * 2. 在<select>标签中, 使用resultMap属性替换 resultType属性.
    -->

    <!--
        id: 唯一标识
        type: 映射的类型, 支持别名
    -->
    <resultMap id="brandResultMap" type="brand">
        <!--
            id: 完成主键字段的映射
                column: 表的列名
                property: 实体类的属性名
            result: 完成一般字段的映射
                column: 表的列名
                property: 实体类的属性名
        -->
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>
    </resultMap>


    <!--sql片段-->
    <!--
        <select id="selectAll" resultType="brand">
            select
            <include refid="brand_column" />
            from tb_brand;
        </select>
        <sql id="brand_column">id, brand_name as brandName, company_name as companyName, ordered, description, status</sql>
        <select id="selectAll" resultType="brand">
            select
                <include refid="brand_column" />
            from tb_brand;
        </select>
    -->

    <select id="selectAll" resultMap="brandResultMap">
        select * from tb_brand;
    </select>


    <!--
        * 参数占位符
            1. #{}: 会将其替换为?, 为了防止SQL注入
            2. ${}: 拼SQL, 会存在SQL注入.
            3. 使用时机:
                * 参数传递的时候: #{}
                * 表名或者列名不固定的情况下: ${}, 会存在SQL注入.
         * 参数类型: parameterType, 可以省略不写.
         * 特殊字符处理:
            1. 转义字符: < &lt;
            2. CDATA区:
    -->
    <!--    <select id="selectById" parameterType="int" resultMap="brandResultMap">
            select * from tb_brand where id = ${id};
        </select>-->

    <select id="selectById" parameterType="int" resultMap="brandResultMap">
        select *
        from tb_brand where id
        <!--&lt; ${id};-->
        <![CDATA[
            <
        ]]> #{id};
    </select>

    <!--
        条件查询
    -->
    <!--    <select id="selectByCondition" resultMap="brandResultMap">
            select *
            from tb_brand
            where status = #{status}
                and company_name like #{companyName}
                and brand_name like #{brandName};
        </select>-->

    <!--
        动态条件查询
            * if 条件判断
                * test 逻辑表达式
            * 问题
                * 恒等式
    -->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        where 1 = 1
        <if test="status != null">
            and status = #{status}
        </if>
        <if test="companyName != null and companyName != '' ">
            and company_name like #{companyName}
        </if>
        <if test="brandName != null and brandName != '' ">
            and brand_name like #{brandName};
        </if>

    </select>
</mapper>